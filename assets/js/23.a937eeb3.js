(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{223:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),s("p",[t._v("设计模式（Design Pattern）是一套被反复使用，多数人知晓的，经过分类的，代码设计经验的总结")]),t._v(" "),s("h2",{attrs:{id:"订阅-发布模式-（观察者）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#订阅-发布模式-（观察者）"}},[t._v("#")]),t._v(" 订阅/发布模式 （观察者）")]),t._v(" "),s("p",[t._v("pub/sub")]),t._v(" "),s("p",[t._v("这种模式中，不是一个对象调用另一个对象的方法，而是一个对象点订阅另一个对象的")]),t._v(" "),s("p",[t._v("特定活动并在状态改变后获得通知，订阅者因此也成为观察者，而被观察的对象成为发布者，当发生了一个重要事件的时候 发布者会通知(调用)所有订阅者并且可能经常以事件对象的形式传递消息。")]),t._v(" "),s("h2",{attrs:{id:"单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),s("p",[t._v("保证一个类只有一个实例")]),t._v(" "),s("h2",{attrs:{id:"代理模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[t._v("#")]),t._v(" 代理模式")])])}),[],!1,null,null,null);a.default=e.exports}}]);